(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{192:function(e,a,t){"use strict";t.r(a);var n=t(0),i=Object(n.a)({},function(){var e=this,a=e.$createElement,t=e._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"configurations-for-cmake"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#configurations-for-cmake","aria-hidden":"true"}},[e._v("#")]),e._v(" Configurations for CMake")]),e._v(" "),t("p",[e._v("Configurations can be used to customize the behaviour of the CMake build and\ncan be used to control every aspect of the build process with CMake.\nThe extensions comes with a set of default configurations matching the\nintegrated build types of CMake\n("),t("code",[e._v("Debug")]),e._v(","),t("code",[e._v("Release")]),e._v(", "),t("code",[e._v("RelWithDebInfo")]),e._v(", "),t("code",[e._v("MinSizeRel")]),e._v("). Furthermore, there are\ndefault values in place for every configuration property. The default values\nare speciefied by the VS Code settings and can be changed through the\nsettings editor.")]),e._v(" "),t("p",[e._v("To edit the configurations with in VS Code, use the "),t("code",[e._v("Edit Configurations")]),e._v("\ncommand. This will open the "),t("code",[e._v("cmake_configurations.json")]),e._v(" within the "),t("code",[e._v(".vscode/")]),e._v("\nfolder. The configurations are seperate for each workspace folder. There is a\njson schema supplied by the extension to guide you through the editing process.\nChanging the configuration file will trigger a validation of the schema and the\nconfigurations are only changed, if the file is validated sucessfully.\nAfterwards, the build directories are updated to reflect the new configurations.")]),e._v(" "),t("p",[e._v("The base structure of the "),t("code",[e._v("cmake_configurations.json")]),e._v(" file looks like:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("{\n  configurations: [\n    ...\n  ]\n}\n")])])]),t("p",[e._v("The "),t("code",[e._v("configurations")]),e._v(" property holds an array of "),t("code",[e._v("configuration")]),e._v(" objects.")]),e._v(" "),t("h2",{attrs:{id:"configuration-object"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#configuration-object","aria-hidden":"true"}},[e._v("#")]),e._v(" Configuration Object")]),e._v(" "),t("p",[e._v("A configuration object has the following properties:")]),e._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"#configuration-name"}},[t("code",[e._v("name")])])]),e._v(" "),t("li",[t("a",{attrs:{href:"#configuration-buildDirectory"}},[t("code",[e._v("buildDirectory")])])]),e._v(" "),t("li",[t("a",{attrs:{href:"#configuration-generator"}},[t("code",[e._v("generator")])])]),e._v(" "),t("li",[t("a",{attrs:{href:"#configuration-buildType"}},[t("code",[e._v("buildType")])])]),e._v(" "),t("li",[t("a",{attrs:{href:"#configuration-toolchain"}},[t("code",[e._v("toolchain")])])]),e._v(" "),t("li",[t("a",{attrs:{href:"#configuration-env"}},[t("code",[e._v("env")])])]),e._v(" "),t("li",[t("a",{attrs:{href:"#configuration-cacheentries"}},[t("code",[e._v("cacheEntries")])])])]),e._v(" "),t("h3",{attrs:{id:"configuration-name"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#configuration-name","aria-hidden":"true"}},[e._v("#")]),e._v(" configuration.name")]),e._v(" "),t("p",[e._v("Specifies the name of the configuration. Must be a unique within the\nconfigurations. The name is shown in the status bar and used to the select a new\nconfiguration.")]),e._v(" "),t("h3",{attrs:{id:"configuration-builddirectory"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#configuration-builddirectory","aria-hidden":"true"}},[e._v("#")]),e._v(" configuration.buildDirectory")]),e._v(" "),t("p",[e._v("Sets the CMake build directory, where the build system is generated.")]),e._v(" "),t("h3",{attrs:{id:"configuration-generator"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#configuration-generator","aria-hidden":"true"}},[e._v("#")]),e._v(" configuration.generator")]),e._v(" "),t("p",[e._v("Select the build system generator to use. See the\n"),t("a",{attrs:{href:"https://cmake.org/cmake/help/latest/manual/cmake-generators.7.html",target:"_blank",rel:"noopener noreferrer"}},[t("code",[e._v("CMake Documentation")]),t("OutboundLink")],1),e._v("\nfor a complete list of generators.")]),e._v(" "),t("h3",{attrs:{id:"configuration-buildtype"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#configuration-buildtype","aria-hidden":"true"}},[e._v("#")]),e._v(" configuration.buildType")]),e._v(" "),t("p",[e._v("Sets the build type for the current build. Depending on the generator, the build type is added as configuration parameter\n(See "),t("a",{attrs:{href:"https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html",target:"_blank",rel:"noopener noreferrer"}},[t("code",[e._v("CMAKE_BUILD_TYPE")]),t("OutboundLink")],1),e._v(")\nor as build parameter for multi-configuration generators (e.g. Visual Studio).\n(See "),t("a",{attrs:{href:"https://cmake.org/cmake/help/latest/variable/CMAKE_CONFIGURATION_TYPES.html",target:"_blank",rel:"noopener noreferrer"}},[t("code",[e._v("CMAKE_CONFIGURATION_TYPES")]),t("OutboundLink")],1),e._v(")")]),e._v(" "),t("h3",{attrs:{id:"configuration-toolchain"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#configuration-toolchain","aria-hidden":"true"}},[e._v("#")]),e._v(" configuration.toolchain")]),e._v(" "),t("p",[e._v("Specifies either a path to a toolchain file as string or an object, which will\nbe used to generate a toolchain file. The object keys are used as variable\nnames and the string values are used as values for the "),t("code",[e._v("set")]),e._v(" command.\nThe specified or generated toolchain file will be passed as argument to CMake\non configuration.\n(See "),t("a",{attrs:{href:"https://cmake.org/cmake/help/latest/variable/CMAKE_TOOLCHAIN_FILE.html",target:"_blank",rel:"noopener noreferrer"}},[t("code",[e._v("CMAKE_TOOLCHAIN_FILE")]),t("OutboundLink")],1),e._v(")")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('  ...\n  toolchain: {\n    "CMAKE_SYSTEM_NAME": "Linux",\n    "CMAKE_SYSTEM_PROCESSOR": "arm",\n    "triple": "arm-linux-gnueabihf",\n    "CMAKE_C_COMPILER": "clang",\n    "CMAKE_C_COMPILER_TARGET": "${triple}",\n    "CMAKE_CXX_COMPILER": "clang++",\n    "CMAKE_CXX_COMPILER_TARGET": "${triple}"\n  },\n  ...\n')])])]),t("p",[e._v("The example above generates the following toolchain file:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("set(CMAKE_SYSTEM_NAME Linux)\nset(CMAKE_SYSTEM_PROCESSOR arm)\nset(triple arm-linux-gnueabihf)\nset(CMAKE_C_COMPILER clang)\nset(CMAKE_C_COMPILER_TARGET ${triple})\nset(CMAKE_CXX_COMPILER clang++)\nset(CMAKE_CXX_COMPILER_TARGET ${triple})\n")])])]),t("h3",{attrs:{id:"configuration-env"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#configuration-env","aria-hidden":"true"}},[e._v("#")]),e._v(" configuration.env")]),e._v(" "),t("p",[e._v("Allows to set additional environment variables for the configuration and build\nprocesses. The "),t("code",[e._v("env")]),e._v(" object keys speciefy the variable names and the object\nvalues the variable values.")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('  ...\n  env: {\n    "QT_DIR": "/opt/qt5-dev/"\n  },\n  ...\n')])])]),t("p",[e._v("With variable substituations, existing variables can be extended.")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('    ...\n    "PATH": "${env:PATH}:/opt/qt5-dev/bin",\n    ...\n')])])]),t("h3",{attrs:{id:"configuration-cacheentries"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#configuration-cacheentries","aria-hidden":"true"}},[e._v("#")]),e._v(" configuration.cacheEntries")]),e._v(" "),t("p",[e._v("Specifies additional CMake cache entries, which will be passed via command line\nargument. It is an array of cache entries, where each entry must have a name\nand a value and can have a type. See the\n"),t("a",{attrs:{href:"https://cmake.org/cmake/help/latest/command/set.html#set-cache-entry",target:"_blank",rel:"noopener noreferrer"}},[t("code",[e._v("CMake Documentation")]),t("OutboundLink")],1),e._v("\nfor additional information on cache entries.")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('  ...\n  "cacheEntries": [\n    {\n      "name": "BOOST_ROOT",\n      "value": "/opt/boost-1.44",\n      "type": "PATH"\n    }\n  ],\n  ...\n')])])]),t("h2",{attrs:{id:"variable-substitutions"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#variable-substitutions","aria-hidden":"true"}},[e._v("#")]),e._v(" Variable substitutions")]),e._v(" "),t("p",[e._v("Values of the configuration fields "),t("code",[e._v("buildDirectory")]),e._v(", "),t("code",[e._v("toolchain")]),e._v(", "),t("code",[e._v("env")]),e._v(" and\n"),t("code",[e._v("cacheEntries")]),e._v(" may use variable substitution to replace the variable\nspecification with the actual variable value. Variables are definied by the\nfollowing pattern: "),t("code",[e._v("${varName}")]),e._v(".")]),e._v(" "),t("p",[e._v("The following variables exists:")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("sourceFolder")]),e._v(": CMAKE_SOURCE_DIR path")]),e._v(" "),t("li",[t("code",[e._v("workspaceFolder")]),e._v(": Workspace folder path")]),e._v(" "),t("li",[t("code",[e._v("name")]),e._v(": Configuration name")]),e._v(" "),t("li",[t("code",[e._v("buildType")]),e._v(": Configuration buildType")]),e._v(" "),t("li",[t("code",[e._v("generator")]),e._v(": Configuration generator")]),e._v(" "),t("li",[t("code",[e._v("env:EnvName")]),e._v(": Â´Environment variable with the name "),t("code",[e._v("EnvName")]),e._v(".")])])])},[],!1,null,null,null);a.default=i.exports}}]);